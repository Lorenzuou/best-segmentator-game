<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="<%= styleSheet %>">

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
</head>
<body>
    <div display="flex" justify-content="center" align-items="center">
        <h1>Ferramenta de Segmentação Automática de Imagens</h1>
        <div style="display: flex;">
            <div>
                <button for="start" class="button" id="imageLoader">Iniciar</button>

                    <!-- CANVAS -->
                    <div class="row">
                    <div class="col">                            
                        <div style="margin: 15px 0;">
                            <h4>Imagem Original</h4>
                        </div>
                        <!-- SEGMENTATION CANVAS -->
                        <canvas id="img_seg" class="canvas_seg"></canvas>
                    </div>

                    <div class="col">
                        <div style="margin: 15px 0;">
                            <h4>Máscara</h4>
                        </div>
                        <!-- CANVAS COM A MÁSCARA RESULTANTE -->
                        <canvas id="img_res"></canvas>
                     

                        <div id="loading" class="loader" style="display: none;"></div>
                    </div>
             

                    <!-- <div class="col"> 
                        <button class="col button button-save" id="downloadImages">Baixar Imagens</button> 
                        <div id="backButtonContainer" style="display: none;">
                            <button class=" button" id="backButton">Voltar para a Página Inicial</button>
                        </div>
                    </div>-->

                </div>
            </div>
           
           
            
        </div>

        <div style="margin: 20px 0;">
            <label for="imageProgress">Progresso:</label>
            <progress id="imageProgress" value="0" max="100"></progress>
            <span id="progressInfo">0/n</span> <!-- Add this line -->
            <button class="button" id="resetButton" style="display: none; margin: 0;">Reset ↺</button>

        </div>
        
        <div id="selection_buttons" class="row" >
          
            <div class="col"> 
                <button class="button" id="pushButton">Next ►</button>
                </div>
            </div>  
       
        </div>
        


        <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.5/jszip.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>

        <script> 

            var fileNames = [];

                        

            
        function zipAndDownload(){
                
                // Create a new zip 
                let zip = new JSZip();

                if (images_ready.length >= size_of_images){
                    zip.file('time.txt', time_spend.toString());
                }

                if (images_ready.length === 0) {
                    alert('No  annotations to download');
                    return;
                }

                // Add images to the zip file
                images_ready.forEach((image, index) => {
                    // Convert the image data to a Blob
                    var imgData = image.replace(/^data:image\/(png|jpg);base64,/, "");
                    var imgBlob = b64toBlob(imgData, 'image/png');

                    let image_name = fileNames[index];

                    //remove extension if not png and add png
                    if (!image_name.endsWith('.png')) {
                        image_name = image_name + '.png';
                    }
                    

                    // Add the image Blob to the zip file
                    zip.file(image_name, imgBlob, {base64: true});
                });

                // Generate the zip file and trigger the download
                zip.generateAsync({type:"blob"})
                .then(function(content) {
                    saveAs(content, sessionIdentifier + '.zip');
                });
        }


            // Function to convert base64 data to a Blob
            function b64toBlob(b64Data, contentType='', sliceSize=512) {
                const byteCharacters = atob(b64Data);
                const byteArrays = [];

                for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                    const slice = byteCharacters.slice(offset, offset + sliceSize);

                    const byteNumbers = new Array(slice.length);
                    for (let i = 0; i < slice.length; i++) {
                        byteNumbers[i] = slice.charCodeAt(i);
                    }

                    const byteArray = new Uint8Array(byteNumbers);
                    byteArrays.push(byteArray);
                }

                const blob = new Blob(byteArrays, {type: contentType});
                return blob;
            }
        </script>
      
        <script>

        var folderName = '<%= groupFolder %>'


        var mode = 'box'

        var size_of_images = 10;
           

        var canvas = document.getElementById('img_seg');
        var canvasSeg = document.getElementById('img_res');
        var ctx = canvas.getContext('2d');
        var ctxSeg = canvasSeg.getContext('2d');
        var img = new Image();
        var rectangles = [];
        var isDown = false;
        var startX;
        var startY;
        var images = [];
        var currentImageIndex = 0;
        var images_ready = [];
        var image_b64_ready = undefined
        var sessionIdentifier = Math.random().toString(36).substring(7);
        //add box-sam- to the session identifier
        sessionIdentifier = 'sam-' + sessionIdentifier;

        var timer = null;

        var time_spend = 0


        var box = [];
        var inputLabels = [];
        var inputPoints = [];


        var sendingAgain = false;

        function click_mode(event){ 
            let canvas = document.getElementById('img_seg');

            // Add the label to the inputLabels array
            inputLabels.push(1);
            //convert input x and y to the original image size
            let x = event.clientX - canvas.offsetLeft;
            let y = event.clientY - canvas.offsetTop;
            let x_ratio = img.width / canvas.width;
            let y_ratio = img.height / canvas.height;

            x = Math.round(x * x_ratio);
            y = Math.round(y * y_ratio);
            
            // Add the point to the inputPoints array
            inputPoints.push([x, y]);

            // Draw a circle on the canvas to show the point
            let x_point = event.clientX - canvas.offsetLeft;
            let y_point = event.clientY - canvas.offsetTop;
            let ctx = canvas.getContext('2d');
            ctx.beginPath();
            ctx.arc(x_point, y_point, 5, 0, 2 * Math.PI);
            ctx.fillStyle = 'blue';
            ctx.fill();
        
        }

        
        let start = null;
        let end = null;
        let mouse_down = false;
    

        function box_mode_down(event){
            start = [event.clientX, event.clientY];
            mouse_down = true;
        }

        function box_mode_move(event){
            if (start != null && mouse_down) {
                end = [event.clientX, event.clientY];
                drawBox();
            }
     
         }

        function box_mouse_up(event){ 
            if (start  != null && end != null) {
                let canvas = document.getElementById('img_seg');
                let x = start[0] - canvas.offsetLeft;
                let y = start[1] - canvas.offsetTop;
                let width = end[0] - start[0];
                let height = end[1] - start[1];

                //convert to the original image size
                x = x * img.width / canvas.width;
                y = y * img.height / canvas.height;
                width = width * img.width / canvas.width;
                height = height * img.height / canvas.height;


                box = [x, y, x + width, y + height];

                // Reset start and end
                start = null;
                end = null;

                document.getElementById('loading').style.display = 'block';
                let dataUrl = images[currentImageIndex];
                let base64Image = dataUrl.split(',')[1];


                let jsonData = {
                    file: base64Image,
                    fileName: fileNames[currentImageIndex],
                    folderName: folderName,
                    box: box,
                    again: sendingAgain,
                    sessionIdentifier: sessionIdentifier

                };
                do_the_fetch_box(jsonData);
                }
            mouse_down = false;
            
         }

     

        function do_the_fetch_box(jsonData){
            let link = '<%= apiUrl %>/predict/box'
            if (mode === 'click'){ 
                link = '<%= apiUrl %>/predict/prompt'
            }

            // Send a POST request to the Flask server
            fetch(link, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)  // send the JSON data
            })
            .then(response => response.json())  // parse the response as JSON
            .then(data => {
                // The image is returned as a base64 string in the 'image' property
                var imageBase64 = 'data:image/png;base64,' + data.image;

                // Create a new Image object
                var img = new Image();
                img.onload = function() {
                    // Draw the image on the img_res canvas when it's loaded
                    var canvas = document.getElementById('img_res');
                    var ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

                    // Hide the loading animation
                    document.getElementById('loading').style.display = 'none';
                    image_b64_ready = img
                
                };
                img.src = imageBase64;
            })
            .catch(error => {
                console.error(error);

                // Hide the loading animation
                document.getElementById('loading').style.display = 'none';
                });
            if (sendingAgain==false){
                sendingAgain = true;
            }
        }


        function drawBox() {
            // Clear the canvas
            let canvas = document.getElementById('img_seg');
            let ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
            // Draw a rectangle on the canvas to show the box
            let x = start[0] - canvas.offsetLeft;
            let y = start[1] - canvas.offsetTop;
            let width = end[0] - start[0];
            let height = end[1] - start[1];
            ctx.beginPath();
            ctx.rect(x, y, width, height);
            ctx.strokeStyle = 'blue';
            ctx.stroke();
        }

        // document.getElementById('downloadImages').addEventListener('click',zipAndDownload);

        //add box listeners
        document.getElementById('img_seg').addEventListener('mousedown', box_mode_down);
        document.getElementById('img_seg').addEventListener('mousemove', box_mode_move);
        document.getElementById('img_seg').addEventListener('mouseup', box_mouse_up);

  

        
          
        function updateProgress(progress) {
            // Update the progress bar, value will be progress/images.lenght on int 
            document.getElementById('imageProgress').value = progress/fileNames.length * 100
            document.getElementById('progressInfo').textContent = progress + '/' + fileNames.length;
        }

        
        async function handleImage(e) {
            sendingAgain = false;
            images_ready = [];
            currentImageIndex = 0;


            // if fileNames is not empty, it means that the user has already loaded the images
            if (fileNames.length > 0) {
                alert('You have already loaded the images, restart if something went wrong');
                return;
            }
            
            

            console.log('handleImage');
            if (folderName === '') {
                alert('Please enter a folder name');
                return;
            }

            sessionIdentifier = sessionIdentifier + "-" + folderName;
            //get name of person from parameter if exists
            var urlParams = new URLSearchParams(window.location.search);
            var name_of_person = urlParams.get('name_of_person');
            if (name_of_person) {
                sessionIdentifier = sessionIdentifier + "-" + name_of_person;
            }

            try {
                // Fetch the image names from the server 
                const response = await fetch('<%= apiUrl %>/image/list?folderName=' + folderName, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await response.json();

                // The image names are returned in the 'images' property
                fileNames = data.images;
                size_of_images = fileNames.length;


                //if 400, alert that the name of the folder is incorrect or do not exist
                if (response.status === 400) {
                    alert('The folder name is incorrect or does not exist');
                    return;
                }

                updateProgress(0);
                timer = new Date().getTime();


                //start timer, it is the now datetime 

                // Fetch each image from the server and push them to the images array
                for (let i = 0; i < fileNames.length; i++) {
                    const imageResponse = await fetch('<%= apiUrl %>/image' + '?imageName=' + fileNames[i] + '&folderName=' + folderName, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const imageData = await imageResponse.json();
                    // The image is returned as a base64 string in the 'image' property
                    images.push('data:image/png;base64,' + imageData.image);
                    if (i == 0) {
                        loadImage();
                    }
                }


            } catch (error) {
                console.error(error);
            }
        }

        function loadImage() {
                img.onload = function() {
                    var maxWidth = 500; // Max width for the image
                    var ratio = 0;  // Used for aspect ratio

                    // Check if the current width is larger than the max
                    if(img.width > maxWidth){
                        ratio = maxWidth / img.width;   // get ratio for scaling image
                        canvas.width = maxWidth;
                        canvas.height = img.height * ratio;
                        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                        // draw second canvas, which is the same size as the first one
                        
                    } else {
                        canvas.width = img.width;
                        canvas.height = img.height;
                        ctx.drawImage(img, 0, 0, img.width, img.height);
                    }
                    canvasSeg.width = canvas.width;
                    canvasSeg.height = canvas.height;
                    // fill black 
                    ctxSeg.fillStyle = 'black';
                    ctxSeg.fillRect(0, 0, canvasSeg.width, canvasSeg.height);
                        
                }
                img.src = images[currentImageIndex];
            }
        console.log('handleImage');
        document.getElementById('imageLoader').addEventListener('click', handleImage, false);


        document.getElementById('pushButton').addEventListener('click', function() {
            
            //check for each mode if the inputs are correct
            if (mode === 'click' && inputLabels.length === 0) {
                alert('Please select at least one point before moving to the next image');
                return;
            }
            if (mode === 'box' && box.length === 0) {
                alert('Please select a box before moving to the next image');
                return;
            }

            if (image_b64_ready === undefined) {
                alert('Please generate the mask before moving to the next image');
                return;
            }
            var canvas = document.getElementById('img_res'); 
            var dataUrl = canvas.toDataURL('image/png')
            images_ready.push(dataUrl);
            image_b64_ready = undefined;

            var data = {
                imageWidth: img.width,
                imageHeight: img.height,
                rectangles: rectangles
            };
            rectangles = [];
            currentImageIndex++;
            sendingAgain = false;
            updateProgress(currentImageIndex);
            

            if (currentImageIndex < size_of_images) {
                loadImage();
            }else{
                
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctxSeg.clearRect(0, 0, canvasSeg.width, canvasSeg.height);
                //alert segmentation is over 
                let end_time = new Date().getTime();
                let time = end_time - timer;
                // turn into seconds
                //send time to the server 
                fetch('<%= apiUrl %>/data/savetimer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({time: time, sessionIdentifier: sessionIdentifier})  // send the JSON data
                })

             
       

                updateProgress(currentImageIndex);
                let urlParams_ = new URLSearchParams(window.location.search);
                let name_of_person_ = urlParams_.get('name_of_person') 
                // const backButtonContainer = document.getElementById('backButtonContainer');
                // const backButton = document.getElementById('backButton');
                // backButtonContainer.style.display = 'block';

                // backButton.onclick = function() {
                //     window.location.href = '/index?name_of_person=' + name_of_person_;
                // };

                fetch('<%= apiUrl %>/data/saverun', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({sessionIdentifier: sessionIdentifier, user_name: name_of_person_, time: time})  // send the JSON data
                })

                //alert segmentation is over 
                alert('Segmentation is over!');
                //sleep 2 seconds to redirect to the ranking page
                setTimeout(function() {
                    window.location.href = '/ranking/sam';
                }, 1200);

            }
        });


        function updateSelectedButton(button) {
            // Remove the border from the previously selected button
            if (selectedButton) {
                selectedButton.style.border = 'none';
            }

            // Add a border to the newly selected button
            button.style.border = '3px solid green';

            // Update the selected button
            selectedButton = button;
        }

        // Initialize the selected button
        var selectedButton = null;

        // Add an event listener to the reset button
        document.getElementById('resetButton').addEventListener('click', function() {
            // Clear the inputLabels and inputPoints arrays
            inputLabels = [];
            inputPoints = [];

            // Clear the canvas
            let canvas = document.getElementById('img_seg');
            let ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Reset the selected button
            if (selectedButton) {
                selectedButton.style.border = 'none';
                selectedButton = null;
            }
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        });

    

       

       
        </script>

    </div>
</body>
</html>

